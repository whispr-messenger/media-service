# Multi-stage Dockerfile optimized for GCP production deployment
# Media Service - Whisper Microservices

# Build stage
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./

# Install dependencies with optimizations
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY prisma/ ./prisma/

# Generate Prisma client and build application
RUN npx prisma generate && \
    npm run build && \
    npm prune --production

# Production stage with multimedia support
FROM node:18-alpine AS production

# Install FFmpeg and multimedia libraries for production
RUN apk add --no-cache \
    ffmpeg \
    imagemagick \
    libwebp-tools \
    vips \
    tini \
    curl \
    && rm -rf /var/cache/apk/*

# Labels for GCP and container registry
LABEL maintainer="Whisper Team" \
      service="media-service" \
      version="1.0.0" \
      environment="production" \
      cloud.provider="gcp" \
      org.opencontainers.image.source="https://github.com/whisper/media-service" \
      org.opencontainers.image.description="Whisper Media Processing Service" \
      org.opencontainers.image.licenses="MIT"

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./

# Create directories for media processing with proper permissions
RUN mkdir -p /app/uploads /app/temp /app/processed /app/logs && \
    chown -R nestjs:nodejs /app/uploads /app/temp /app/processed /app/logs && \
    chmod 755 /app/uploads /app/temp /app/processed /app/logs

# Use non-root user for security
USER nestjs

# Environment variables for production
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=1024 --enable-source-maps" \
    PORT=3003 \
    GRPC_PORT=50053 \
    LOG_LEVEL=info \
    METRICS_ENABLED=true \
    HEALTH_CHECK_TIMEOUT=5000 \
    UPLOAD_MAX_SIZE=100MB \
    FFMPEG_THREADS=2 \
    IMAGE_PROCESSING_QUALITY=85 \
    TEMP_DIR=/app/temp \
    UPLOAD_DIR=/app/uploads \
    PROCESSED_DIR=/app/processed

# Expose ports
EXPOSE 3003 50053

# Health check optimized for GCP with media service specifics
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:3003/health || exit 1

# Use tini as init system for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "dist/main.js"]

# Security and optimization metadata
LABEL security.scan="enabled" \
      optimization.level="production" \
      gcp.cloud-run="compatible" \
      gcp.gke="compatible" \
      gcp.cloud-storage="enabled" \
      monitoring.prometheus="enabled" \
      multimedia.ffmpeg="enabled" \
      multimedia.imagemagick="enabled" \
      database.type="postgresql" \
      storage.type="gcs"