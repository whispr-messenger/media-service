generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Media {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @map("user_id") @db.Uuid
  conversationId    String?   @map("conversation_id") @db.Uuid
  messageId         String?   @map("message_id") @db.Uuid
  originalFilename  String    @map("original_filename") @db.VarChar(255)
  contentType       String    @map("content_type") @db.VarChar(100)
  fileSize          BigInt    @map("file_size")
  storagePath       String    @unique @map("storage_path") @db.VarChar(500)
  encryptionKeyHash String    @map("encryption_key_hash") @db.VarChar(128)
  moderationHash    String    @map("moderation_hash") @db.VarChar(128)
  categoryId        String    @map("category_id") @db.Uuid
  metadata          Json      @default("{}")
  exifData          Json      @default("{}") @map("exif_data")
  isCompressed      Boolean   @default(false) @map("is_compressed")
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  expiresAt         DateTime? @map("expires_at")

  category   MediaCategory    @relation(fields: [categoryId], references: [id])
  previews   MediaPreview[]
  accessLogs MediaAccessLog[]
  shares     MediaShare[]     @relation("SharedMedia")

  @@index([userId])
  @@index([conversationId, messageId])
  @@index([moderationHash])
  @@index([createdAt])
  @@index([isActive])
  @@map("media")
}

model MediaPreview {
  id          String   @id @default(uuid()) @db.Uuid
  mediaId     String   @map("media_id") @db.Uuid
  previewType String   @map("preview_type") @db.VarChar(50)
  storagePath String   @map("storage_path") @db.VarChar(500)
  contentType String   @map("content_type") @db.VarChar(100)
  width       Int?
  height      Int?
  fileSize    BigInt   @map("file_size")
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([mediaId])
  @@index([previewType])
  @@map("media_previews")
}

model UserQuota {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @unique @map("user_id") @db.Uuid
  storageUsed      BigInt   @default(0) @map("storage_used")
  storageLimit     BigInt   @default(1073741824) @map("storage_limit") // 1GB default
  filesCount       Int      @default(0) @map("files_count")
  filesLimit       Int      @default(1000) @map("files_limit")
  dailyUploads     Int      @default(0) @map("daily_uploads")
  dailyUploadLimit Int      @default(100) @map("daily_upload_limit")
  quotaDate        DateTime @default(now()) @map("quota_date") @db.Date
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([quotaDate])
  @@map("user_quotas")
}

model MediaCategory {
  id                 String   @id @default(uuid()) @db.Uuid
  name               String   @unique @db.VarChar(100)
  description        String?  @db.Text
  allowedTypes       Json     @default("[]") @map("allowed_types")
  maxFileSize        BigInt   @map("max_file_size")
  compressionEnabled Boolean  @default(true) @map("compression_enabled")
  previewEnabled     Boolean  @default(true) @map("preview_enabled")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  media Media[]

  @@map("media_categories")
}

model MediaAccessLog {
  id              String   @id @default(uuid()) @db.Uuid
  mediaId         String   @map("media_id") @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  actionType      String   @map("action_type") @db.VarChar(50)
  clientIp        String?  @map("client_ip") @db.VarChar(45)
  userAgent       String?  @map("user_agent") @db.Text
  requestMetadata Json     @default("{}") @map("request_metadata")
  accessedAt      DateTime @default(now()) @map("accessed_at")

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([mediaId])
  @@index([userId])
  @@index([actionType])
  @@index([accessedAt])
  @@map("media_access_logs")
}

model MediaShare {
  id              String    @id @default(uuid()) @db.Uuid
  mediaId         String    @map("media_id") @db.Uuid
  sharedBy        String    @map("shared_by") @db.Uuid
  sharedWith      String    @map("shared_with") @db.Uuid
  permissionLevel String    @map("permission_level") @db.VarChar(20)
  sharedAt        DateTime  @default(now()) @map("shared_at")
  expiresAt       DateTime? @map("expires_at")
  isActive        Boolean   @default(true) @map("is_active")

  media Media @relation("SharedMedia", fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([mediaId])
  @@index([sharedBy])
  @@index([sharedWith])
  @@index([isActive])
  @@map("media_shares")
}

model ModerationHash {
  id        String   @id @default(uuid()) @db.Uuid
  hashValue String   @unique @map("hash_value") @db.VarChar(128)
  hashType  String   @map("hash_type") @db.VarChar(20)
  status    String   @db.VarChar(20)
  reason    String?  @db.Text
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([hashValue])
  @@index([status])
  @@map("moderation_hashes")
}
